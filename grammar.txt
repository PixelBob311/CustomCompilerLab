*Program:
	Declaration*
	Statement*
Declaration:
	ClassDeclaration
	FunctionDeclaration
ClassDeclaration:
	'class' Identifier '{' ClassMember* '}'
ClassMember:
	Field
	Method
Field:
	'readonly'? Type Identifier ';'
Method:
	Type Identifier '(' Parameters? ')' Block
FunctionDeclaration:
	'func' Type Identifier '(' Parameters? ')' Block
Parameters:
	(Parameters ',')? Parameter
Parameter:
	Type Identifier
Type:
	Identifier
	'(' Type ')'
Statement:
	ExpressionStatement
	VariableDeclaration
	Assignment
	If
	While
	Return
	Break
	Continue
ExpressionStatement:
	Expression ';'
VariableDeclaration:
	'var' Identifier (':' Type)? '=' Expression ';'
Assignment:
	Identifier '=' Expression ';'
	MemberAccess '=' Expression ';'
If:
	'if' '(' Expression ')' Block
While:
	'while' '(' Expression ')' ('as' Identifier)? Block
Return:
	'return' Expression? ';'
Break:
	'break' (Number | Identifier)? ';'
Continue:
	'continue' Number? ';'
Block:
	'{' Statement* '}'
ExpressionType:
	'::' Type
Expression:
	Ternary
Ternary:
	OrOp '?' Expression ':' Expression ExpressionType?
	OrOp
OrOp:
	OrOp "||" AndOp ExpressionType?
	AndOp 
AndOp:
	AndOp "&&" Equality ExpressionType?
	Equality
Equality:
	Equality ("==" | "!=") Relational ExpressionType?
	Relational
Relational:
	Relational ("<" | "<=" | ">" | ">=") Additive ExpressionType?
	Additive
Additive:
	Additive ("+" | "-") Multiplicative ExpressionType?
	Multiplicative
Multiplicative:
	Multiplicative ("*" | "/" | "%") Primary ExpressionType?
	Primary
Primary:
	Call
	MemberAccess
	IndexAccess
	SliceAccess
	SliceWithStepAccess
	Primitive
Call:
	Primary '(' Arguments? ')' ExpressionType?
Arguments:
	(Arguments ',')? Expression
MemberAccess:
	Primary '.' Identifier ExpressionType?
IndexAccess:
	Primary '[' Expression ']' ExpressionType?
SliceAccess:
	Primary '[' Expression? ':' Expression? ']' ExpressionType?
SliceWithStepAccess:
	Primary '[' Expression? ':' Expression? ':' Expression? ']' ExpressionType?
Primitive:
	'[' Elements? ']'
	Number ExpressionType?
	Identifier ExpressionType?
	String ExpressionType?
	'(' Expression ')' ExpressionType?
Elements:
	Elements ',' Expression
	Expression
